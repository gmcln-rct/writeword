{"version":3,"sources":["components/Word.js","context/WordContext.js","components/Words.js","components/InputForm.js","components/Navbar.js","App.js","index.js"],"names":["Word","rgb","word","score","percentage","tag","toFixed","alpha","fontcolor","className","style","background","color","WordContext","createContext","searchWord","searchType","WordContextProvider","props","wordContext","useContext","useState","setSearchWord","setSearchType","provider","Provider","value","children","fetchWords","key","a","fetch","res","json","Words","useQuery","data","status","undefined","console","log","Object","entries","length","id","map","InputForm","setWord","search","setSearch","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","selectedIndex","defaultValue","Navbar","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0655658.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Word = ({ word, score, tag }) => {\n\n    let percentage = (score/1200).toFixed(2);\n    let alpha = ((score/1200)/100).toFixed(2);\n    let rgb;\n    let fontcolor = \"#000\"\n\n    switch(true) {\n      case (alpha > .70):\n        // rgb = \"26,22,85\";\n        // fontcolor = \"rgb(255,255,255)\";\n        rgb = \"255,255,255\";\n        fontcolor = \"26,22,85\";\n        break;\n      case (alpha > .50):\n        rgb = \"155,164,203\";\n        fontcolor = \"20,20,20\";\n        break;\n      case (alpha > .30):\n        rgb = \"56,56,85\";\n        fontcolor = \"255,255,255\";\n        break;\n      default:\n        rgb = \"154,154,194\";\n        fontcolor = \"5,5,5\";\n\n    }\n\n\n    return (\n      <div className=\"card\" style={{ background: `rgba(${rgb},0.8)`, color: `rgb(${fontcolor})` }}>\n        <h3>{word}</h3>\n        <p>Relevance: {percentage}%</p>\n        {/* <p>{percentage}</p> */}\n        {/* <p>Tag = {tag}</p> */}\n      </div>\n    );\n}\n\nexport default Word;","import React, { useState, createContext, useContext } from 'react';\n\nexport const WordContext = createContext({\n         searchWord: \"nothing\",\n         searchType: \"ml\",\n       });\n\n\n\nexport function WordContextProvider(props) {\n\n    const wordContext = useContext(WordContext);\n\n    const [searchWord, setSearchWord] = useState(wordContext.searchWord);\n    const [searchType, setSearchType] = useState(wordContext.searchType);\n\n\n    const provider = {\n\n        searchWord,\n        setSearchWord: (searchWord) => {\n            setSearchWord(searchWord);\n        },\n        searchType,\n        setSearchType: (searchType) => {\n            setSearchType(searchType);\n        },\n\n    };\n\n    return (\n        <WordContext.Provider value={provider}>\n            {props.children}\n        </WordContext.Provider>\n    );\n};\n\n","import React, {useState, useContext} from 'react';\nimport { useQuery } from 'react-query';\n\nimport Word from './Word';\nimport { WordContext } from '../context/WordContext';\n\n\nconst fetchWords = async (key, searchType, word) => {\n    const res = await fetch(`https://api.datamuse.com/words?${searchType}=${word}`);\n    return res.json();\n\n}\n\nconst Words = () => {\n\n    const { searchWord, searchType } = useContext(WordContext);\n    // const [ word, setWord ] = useState(\"\");\n    const { data, status } = useQuery(['words', searchType, searchWord], fetchWords);\n\n    let value = data;\n    if (value !== undefined ) {\n        console.log(Object.entries(value).length);\n    } \n\n    return (\n        <>\n            {\n                status === 'loading' && (\n                    <div id=\"status-message\">Data loading</div>\n                )\n            }\n            {\n                status === 'error' && (\n                    <div id=\"status-message\"> Error loading data </div>\n                )\n            }\n\n            {\n                status === 'success' && (\n                    <>\n                        {(Object.entries(value).length === 0) ? \n                        <div className=\"empty-div\"></div>  :\n                        data.map(word =>\n                            <Word\n                                key={word.word}\n                                word={word.word}\n                                score={word.score}\n                                tag={word.tag}\n                            />\n                        )}\n                    </>\n                )\n            }\n        </>\n    );\n}\n\nexport default Words;","  \nimport React, { useContext, useState } from 'react';\nimport { WordContext } from '../context/WordContext';\n\nconst InputForm = () => {\n  let { searchWord, setSearchWord, searchType, setSearchType } = useContext(WordContext);  \n\n  const [word, setWord] = useState('');\n  const [search, setSearch] = useState('');\n\n  let searchWordDisplay = \"\";\n  let searchTypeDisplay = \"\";\n\n   const SearchTypeReference = {\n    \"ml\": \"synonym\",\n    \"sl\": \"sounds similar\",\n    \"rel_rhym\": \"rhyming words\",\n    \"sp\": \"similar spelling\",\n    \"rel_jjb\": \"related adjectives\",\n    \"rel_jja\": \"related nouns\",\n  }\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setSearchWord(word);\n    setSearchType(searchType);\n    searchWordDisplay = word;\n    setWord('');\n    setSearch('');\n  }\n\n  function handleChange(e) {\n    setSearchType(e.target.value);\n    let idx = e.target.selectedIndex;\n    // searchType = e.target.options[idx].value;\n\n    // searchTypeDisplay = e.target.options[idx].innerText;\n    return (\n      <div>Just a return value</div>\n    )\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter Word\"\n          value={word}\n          onChange={(e) => setWord(e.target.value)}\n          required\n        />\n\n        <select\n          className=\"select-css\"\n          value={search}\n          onChange={handleChange}\n        >\n          <option value=\"\" defaultValue>Choose Search Type</option>\n          <option value=\"ml\">Synonyms</option>\n          <option value=\"sl\">Sounds Similar</option>\n          <option value=\"sp\">Similar Spelling</option>\n          <option value=\"rel_jjb\">Related Adjectives</option>\n          <option value=\"rel_jja\">Related Nouns</option>\n        </select>\n        <input type=\"submit\" value=\"Find Words\" />\n      </form>\n      <h2 id=\"search-word\">\n        Search Term: <span id=\"yellow-text\">{(!searchWord) ? \"\" : searchWord}</span> </h2>\n        <h2 id=\"search-word\">Search Type: <span id=\"searchtype-text\">{SearchTypeReference[searchType]}</span> \n      </h2>\n    </>\n  );\n}\n \nexport default InputForm;","import React, {useContext} from 'react';\n\nconst Navbar = () => {\n\n    return ( \n        <nav>\n            The Write Word\n        </nav>\n     );\n}\n \nexport default Navbar;","import React, { useState} from 'react';\nimport Words from './components/Words';\nimport InputForm from './components/InputForm';\nimport Navbar from './components/Navbar';\nimport { ReactQueryDevtools } from \"react-query-devtools\";\n\nimport { WordContextProvider } from './context/WordContext';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <WordContextProvider>\n      <Navbar />\n      <InputForm />\n      <div className=\"content\">\n        <Words />\n      </div>\n        </WordContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/reset.scss';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}