{"version":3,"sources":["context/WordContext.js","components/InputForm.js","components/Navbar.js","components/Word.js","components/Words.js","components/Footer.js","App.js","index.js"],"names":["WordContext","createContext","searchWord","searchType","WordContextProvider","props","wordContext","useContext","useState","setSearchWord","setSearchType","provider","Provider","value","children","InputForm","word","setWord","setSearch","onSubmit","e","preventDefault","id","className","name","onChange","event","target","defaultValue","type","placeholder","autoFocus","required","Navbar","role","Word","score","percentage","tag","isNaN","Math","ceil","rgb","alpha","toFixed","fontcolor","style","background","color","fetchWords","a","fetch","res","json","Words","useQuery","data","status","undefined","console","log","Object","entries","length","map","key","Footer","year","Date","getFullYear","href","rel","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8e249db.chunk.js","sourcesContent":["import React, { useState, createContext, useContext } from 'react';\n\nexport const WordContext = createContext({\n         searchWord: \"nothing\",\n         searchType: \"\",\n       });\n\n\n\nexport function WordContextProvider(props) {\n\n    const wordContext = useContext(WordContext);\n\n    const [searchWord, setSearchWord] = useState(wordContext.searchWord);\n    const [searchType, setSearchType] = useState(wordContext.searchType);\n\n\n    const provider = {\n\n        searchWord,\n        setSearchWord: (searchWord) => {\n            setSearchWord(searchWord);\n        },\n        searchType,\n        setSearchType: (searchType) => {\n            setSearchType(searchType);\n        },\n\n    };\n\n    return (\n        <WordContext.Provider value={provider}>\n            {props.children}\n        </WordContext.Provider>\n    );\n};\n\n","  \nimport React, { useContext, useState } from 'react';\nimport { WordContext } from '../context/WordContext';\n\nconst InputForm = () => {\n  let { searchWord, setSearchWord, searchType, setSearchType } = useContext(WordContext);  \n\n  const [word, setWord] = useState('');\n  const [search, setSearch] = useState('');\n\n  let searchWordDisplay = \"\";\n\n   const SearchTypeReference = {\n    \"ml\": \"similar or related meaning\",\n     \"rel_ant\": \"opposite meaning\",\n    \"sl\": \"sounds similar\",\n    \"rel_rhy\": \"rhyming words\",\n    \"sp\": \"similar spelling\",\n    \"rel_jjb\": \"related adjectives\",\n    \"rel_jja\": \"related nouns\",\n  }\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setSearchWord(word);\n    setSearchType(searchType);\n    searchWordDisplay = word;\n    setWord('');\n    setSearch('');\n  }\n\n  // function handleChange(e) {\n  //   setSearchType(e.target.value);\n  //   let idx = e.target.selectedIndex;\n  //   searchType = e.target.options[idx].value;\n\n  //   return (\n  //     <div>Just a return value</div>\n  //   )\n  // };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <span id=\"input-span\">\n          <h1 className=\"input-header\">Show me words that...</h1>\n          <select\n            className=\"select-css\"\n            name=\"choose search type\"\n            value={searchType}\n            onChange={event => setSearchType(event.target.value)}\n          >\n            <option value=\"\" defaultValue>Choose Search Type</option>\n            <option value=\"ml\">have similar meaning to:</option>\n            <option value=\"rel_ant\">have opposite meaning to:</option>\n            <option value=\"sl\">sound similar to:</option>\n            <option value=\"rel_rhy\">rhymes with:</option>\n            <option value=\"rel_jjb\">are adjectives related to:</option>\n            <option value=\"rel_jja\">are nouns related to:</option>\n          </select>\n          <input\n            type=\"text\"\n            placeholder=\"Enter Word\"\n            autoFocus\n            value={word}\n            onChange={(e) => setWord(e.target.value)}\n            required\n          />\n        </span>\n        <button type=\"submit\" name=\"submit\" value=\"Submit\" >Submit</button>\n        {/* <input type=\"submit\" name=\"submit\" value=\"Submit\" /> */}\n      </form>\n      <div className=\"search-info\">\n        <div id=\"search-word\">Search Term: <span id=\"yellow-text\">{(!searchWord) ? \"\" : searchWord}</span> </div>\n        <div id=\"search-word\"> | </div>\n        <div id=\"search-word\">Search Type: <span id=\"searchtype-text\">{searchType === \"\" ? \"similar meaning to\" : SearchTypeReference[searchType]}</span> \n        </div>\n      </div>\n\n    </>\n  );\n}\n \nexport default InputForm;","import React, {useContext} from 'react';\n\nconst Navbar = () => {\n\n    return ( \n        <nav role=\"navigation\">\n            The Write Word\n        </nav>\n     );\n}\n \nexport default Navbar;","import React from 'react';\n\n\nconst Word = ({ word, score, tag }) => {\n\n    let percentage = isNaN(Math.ceil((score / 1200))) ? 1 : Math.ceil((score / 1200));\n    percentage = percentage > 100? 100 : percentage;\n    let alpha = ((score/1200)/100).toFixed(2);\n    let rgb;\n    let fontcolor = \"#000\"\n\n    switch(true) {\n      case (alpha > .70):\n        // rgb = \"26,22,85\";\n        // fontcolor = \"rgb(255,255,255)\";\n        rgb = \"255,255,255\";\n        fontcolor = \"26,22,85\";\n        break;\n      case (alpha > .50):\n        rgb = \"182,191,237\";\n        fontcolor = \"20,20,20\";\n        break;\n      case (alpha > .30):\n        rgb = \"56,56,85\";\n        fontcolor = \"255,255,255\";\n        break;\n      default:\n        rgb = \"154,154,194\";\n        fontcolor = \"5,5,5\";\n    }\n\n\n    return (\n      <div className=\"card\" style={{ background: `rgba(${rgb},0.9)`, color: `rgb(${fontcolor})` }}>\n        <h3>{word}</h3>\n        <p>Relevance: {percentage}%</p>\n        {/* <p>{percentage}</p> */}\n        {/* <p>Tag = {tag}</p> */}\n      </div>\n    );\n}\n\nexport default Word;","import React, {useState, useContext} from 'react';\nimport { useQuery } from 'react-query';\n\nimport Word from './Word';\nimport { WordContext } from '../context/WordContext';\n\n\nconst fetchWords = async (searchType, word) => {\n    if (!word || word === \"\") {\n        word = \"nothing\";\n    }\n    if (!searchType || searchType === \"\") {\n        searchType = \"ml\";\n    }\n    const res = await fetch(`https://api.datamuse.com/words?${searchType}=${word}`);\n    return res.json();\n\n}\n\nconst Words = () => {\n    const { searchWord, searchType } = useContext(WordContext);\n    const { data, status } = useQuery([ searchType, searchWord], fetchWords);\n\n    let value = data;\n    if (value !== undefined ) {\n        console.log(Object.entries(value).length);\n    } \n\n    return (\n        <>\n            {\n                status === 'loading' && (\n                    <div id=\"status-message\">Data loading</div>\n                )\n            }\n            \n            {\n                status === 'error' && (\n                    <div id=\"status-message\"> Error loading data </div>\n                )\n            }\n\n            {\n                status === 'success' && (\n                    <>\n                        {(Object.entries(value).length === 0) ? \n                        <div className=\"empty-div\"></div>  :\n                        data.map(word =>\n                            <Word\n                                key={word.word}\n                                word={word.word}\n                                score={word.score}\n                                tag={word.tag}\n                            />\n                        )}\n                    </>\n                )\n            }\n        </>\n    );\n}\n\nexport default Words;","import React, { useContext } from 'react';\n\nconst Footer = () => {\n    var day = new Date();\n    var year = day.getFullYear();\n    return (\n        <footer>\n            <p>Data Source: <a href=\"https://www.datamuse.com/api/\" target=\"_blank\" rel=\"noopener noreferrer\">Datamuse API</a></p>\n            <p>©{year} Glenn McClanan</p>\n        </footer>\n    );\n}\n\nexport default Footer;","import React, { useState} from 'react';\nimport InputForm from './components/InputForm';\nimport Navbar from './components/Navbar';\nimport Words from './components/Words';\nimport Footer from './components/Footer';\nimport { ReactQueryDevtools } from \"react-query-devtools\";\n\nimport { WordContextProvider } from './context/WordContext';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <WordContextProvider>\n        <Navbar />\n        <InputForm />\n        <main className=\"content\">\n          <Words />\n        </main>\n      </WordContextProvider>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/reset.scss';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}