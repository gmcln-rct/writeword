{"version":3,"sources":["components/Word.js","context/WordContext.js","components/Words.js","components/InputForm.js","components/Navbar.js","App.js","index.js"],"names":["Word","rgb","word","score","percentage","tag","toFixed","alpha","fontcolor","className","style","background","color","WordContext","createContext","searchType","WordContextProvider","props","wordContext","useContext","useState","searchWord","setSearchWord","setSearchType","provider","Provider","value","children","fetchWords","key","search","a","fetch","res","json","Words","useQuery","data","status","id","map","InputForm","setWord","setSearch","searchWordDisplay","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","Navbar","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAsCeA,EAnCF,SAAC,GAA0B,IAIhCC,EAJQC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAEdC,GAF+B,EAAVC,KAEPF,EAAM,MAAMG,QAAQ,IAClCC,GAAUJ,EAAM,KAAM,KAAKG,QAAQ,GAEnCE,EAAY,OAEhB,QAAO,GACL,KAAMD,EAAQ,GAEZN,EAAM,WACNO,EAAY,mBACZ,MACF,KAAMD,EAAQ,GACZN,EAAM,cACNO,EAAY,OACZ,MACF,KAAMD,EAAQ,GACZN,EAAM,cACN,MACF,QACEA,EAAM,cAIV,OACE,yBAAKQ,UAAU,OAAOC,MAAO,CAAEC,WAAW,QAAD,OAAUV,EAAV,SAAsBW,MAAM,GAAD,OAAKJ,KACvE,4BAAKN,GACL,yCAAeE,EAAf,O,OC7BKS,EAAcC,wBAAc,CACrCZ,KAAM,GACNa,WAAY,OAIT,SAASC,EAAoBC,GAEhC,IAAMC,EAAcC,qBAAWN,GAFQ,EAIHO,mBAASF,EAAYG,YAJlB,mBAIhCA,EAJgC,KAIpBC,EAJoB,OAKHF,mBAASF,EAAYH,YALlB,mBAKhCA,EALgC,KAKpBQ,EALoB,KAQjCC,EAAW,CAEbH,aACAC,cAAe,SAACD,GACZC,EAAcD,IAElBN,aACAQ,cAAe,SAACR,GACZQ,EAAcR,KAKtB,OACI,kBAACF,EAAYY,SAAb,CAAsBC,MAAOF,GACxBP,EAAMU,UCxBnB,IAAMC,EAAU,uCAAG,WAAOC,EAAKC,EAAQ5B,GAApB,eAAA6B,EAAA,sEACGC,MAAM,kCAAD,OAAmCF,EAAnC,YAA6C5B,IADrD,cACT+B,EADS,yBAERA,EAAIC,QAFI,2CAAH,0DA6CDC,EAvCD,WAAO,IAAD,EAEmBhB,qBAAWN,GAAtCQ,EAFQ,EAERA,WAFQ,KAEIN,WAEKqB,YAAS,CAAC,QAAS,KAAMf,GAAaO,IAAvDS,EAJQ,EAIRA,KAAMC,EAJE,EAIFA,OAEd,OACI,oCAGmB,YAAXA,GACI,yBAAKC,GAAG,kBAAR,yBAIO,UAAXD,GACI,yBAAKC,GAAG,kBAAR,yBAKO,YAAXD,GACI,oCACKD,EAAKG,KAAI,SAAAtC,GAAI,OAEV,kBAAC,EAAD,CACI2B,IAAK3B,EAAKA,KACVA,KAAMA,EAAKA,KACXC,MAAOD,EAAKC,MACZE,IAAKH,EAAKG,YCuB3BoC,G,KA7DG,WAAO,IAAD,EACiBtB,qBAAWN,GAA3CS,EADe,EACfA,cAAeC,EADA,EACAA,cADA,EAGEH,mBAAS,IAHX,mBAGflB,EAHe,KAGTwC,EAHS,OAIUtB,mBAAS,IAJnB,mBAIfL,EAJe,KAIH4B,EAJG,KAMlBC,EAAoB,GAoBxB,OACE,oCACE,0BAAMC,SApBW,SAACC,GACpBA,EAAEC,iBACFzB,EAAcpB,GACdqB,EAAcR,GACd6B,EAAoB1C,EACpBwC,EAAQ,IACRC,EAAU,MAeN,2BACEK,KAAK,OACLC,YAAY,aACZvB,MAAOxB,EACPgD,SAAU,SAACJ,GAAD,OAAOJ,EAAQI,EAAEK,OAAOzB,QAClC0B,UAAQ,IAeV,2BAAOJ,KAAK,SAAStB,MAAM,wBAE7B,wBAAIa,GAAG,eAAP,uBACuB,IACrB,0BAAMA,GAAG,eACgB,KAAtBK,EAA2B,UAAYA,OC/CnCS,EATA,WAEX,OACI,gDCmBOC,MAff,WAEE,OACE,yBAAK7C,UAAU,OACb,kBAACO,EAAD,KACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKP,UAAU,WACb,kBAAC,EAAD,UCXR8C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.98043202.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Word = ({ word, score, tag }) => {\n\n    let percentage = (score/1200).toFixed(2);\n    let alpha = ((score/1200)/100).toFixed(2);\n    let rgb;\n    let fontcolor = \"#000\"\n\n    switch(true) {\n      case (alpha > .70):\n\n        rgb = \"50,50,50\";\n        fontcolor = \"rgb(255,255,150)\";\n        break;\n      case (alpha > .50):\n        rgb = \"125,125,125\";\n        fontcolor = \"#fff\";\n        break;\n      case (alpha > .30):\n        rgb = \"200,200,200\";\n        break;\n      default:\n        rgb = \"255,255,255\";\n    }\n\n\n    return (\n      <div className=\"card\" style={{ background: `rgba(${rgb},0.7)`, color: `${fontcolor}` }}>\n        <h3>{word}</h3>\n        <p>Relevance: {percentage}%</p>\n        {/* <p>{percentage}</p> */}\n        {/* <p>Tag = {tag}</p> */}\n      </div>\n    );\n}\n\nexport default Word;","import React, { useState, createContext, useContext } from 'react';\n\nexport const WordContext = createContext({\n    word: \"\",\n    searchType: \"ml\"\n});\n\n\nexport function WordContextProvider(props) {\n\n    const wordContext = useContext(WordContext);\n\n    const [searchWord, setSearchWord] = useState(wordContext.searchWord);\n    const [searchType, setSearchType] = useState(wordContext.searchType);\n\n\n    const provider = {\n\n        searchWord,\n        setSearchWord: (searchWord) => {\n            setSearchWord(searchWord);\n        },\n        searchType,\n        setSearchType: (searchType) => {\n            setSearchType(searchType);\n        },\n\n    };\n\n    return (\n        <WordContext.Provider value={provider}>\n            {props.children}\n        </WordContext.Provider>\n    );\n};\n\n","import React, {useState, useContext} from 'react';\nimport { useQuery } from 'react-query';\n\nimport Word from './Word';\nimport { WordContext } from '../context/WordContext';\n\n\nconst fetchWords = async (key, search, word) => {\n    const res = await fetch(`https://api.datamuse.com/words?${search}=${word}`);\n    return res.json();\n\n}\n\nconst Words = () => {\n\n    const { searchWord, searchType } = useContext(WordContext);\n    // const [ word, setWord ] = useState(\"\");\n    const { data, status } = useQuery(['words', \"ml\", searchWord], fetchWords);\n    \n    return (\n        <>\n\n            {\n                status === 'loading' && (\n                    <div id=\"status-message\">Tauntauns are loading</div>\n                )\n            }\n            {\n                status === 'error' && (\n                    <div id=\"status-message\"> Error fetching data </div>\n                )\n            }\n\n            {\n                status === 'success' && (\n                    <>\n                        {data.map(word =>\n\n                            <Word\n                                key={word.word}\n                                word={word.word}\n                                score={word.score}\n                                tag={word.tag}\n                            />\n                        )}\n                    </>\n                )\n            }\n        </>\n    );\n}\n\nexport default Words;","  \nimport React, { useContext, useState } from 'react';\nimport { WordContext } from '../context/WordContext';\n\nconst InputForm = () => {\n  const {setSearchWord, setSearchType} = useContext(WordContext);  \n\n  const [word, setWord] = useState('');\n  const [searchType, setSearch] = useState('');\n\n  let searchWordDisplay = \"\";\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setSearchWord(word);\n    setSearchType(searchType);\n    searchWordDisplay = word;\n    setWord('');\n    setSearch('');\n  }\n\n  function handleChange(e) {\n    setSearchType(e.target.value);\n    let idx = e.target.selectedIndex;\n    searchType = e.target.options[idx].innerText;\n    return (\n      <div>Just a return value</div>\n    )\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter Word\"\n          value={word}\n          onChange={(e) => setWord(e.target.value)}\n          required\n        />\n\n        {/* <select\n          className=\"select-css\"\n          value={searchType}\n          onChange={handleChange}\n        >\n          <option value=\"ml\">Synonyms</option>\n          <option value=\"sl\">Sounds Like</option>\n          <option value=\"rel_rhym\">Rhymes</option>\n          <option value=\"sp\">Similar Spelling</option>\n          <option value=\"rel_jjb\">Related Adjectives</option>\n          <option value=\"rel_jja\">Related Nouns</option>\n        </select> */}\n        <input type=\"submit\" value=\"Find Related Words\" />\n      </form>\n      <h2 id=\"search-word\">\n        Current search term:{\" \"}\n        <span id=\"yellow-text\">\n          {searchWordDisplay === \"\" ? \"nothing\" : searchWordDisplay}\n        </span>\n      </h2>\n    </>\n  );\n}\n \nexport default InputForm;","import React, {useContext} from 'react';\n\nconst Navbar = () => {\n\n    return ( \n        <nav>\n            The Write Word\n        </nav>\n     );\n}\n \nexport default Navbar;","import React, { useState} from 'react';\nimport Words from './components/Words';\nimport InputForm from './components/InputForm';\nimport Navbar from './components/Navbar';\nimport { ReactQueryDevtools } from \"react-query-devtools\";\n\nimport { WordContextProvider } from './context/WordContext';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <WordContextProvider>\n      <Navbar />\n      <InputForm />\n      <div className=\"content\">\n        <Words />\n      </div>\n        </WordContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/reset.scss';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}